// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel TexToBuffer RGBM
#pragma kernel BufferToTex RGBM
#pragma kernel TexToBuffer ARGB
#pragma kernel BufferToTex ARGB
#include "CGINC/Texture.cginc"
    uint DownDim(uint2 uv, uint width)
    {
        return uv.y * width + uv.x;
    }

Texture2D<float4> _InputTex;
RWTexture2DArray<float4> _OutputTex;
RWStructuredBuffer<uint> _Buffer;
uint _Width;
uint _OffsetIndex;
uint _Scale;
[numthreads(8,8,1)]
void TexToBuffer (uint2 id : SV_DispatchThreadID)
{
    uint index = DownDim(id, _Width);
    #ifdef RGBM
    _Buffer[index] = EncodeColor(_InputTex[id].xyz);
    #endif
    #ifdef ARGB
    _Buffer[index] = Encode(_InputTex[id]);
    #endif
}

[numthreads(8,8,1)]
void BufferToTex (uint2 id : SV_DispatchThreadID)
{
    uint index = DownDim(id / _Scale, _Width);
    #ifdef RGBM
    _OutputTex[uint3(id, _OffsetIndex)] = float4(DecodeColor(_Buffer[index]), 1);
    #endif
    #ifdef ARGB
    _OutputTex[uint3(id, _OffsetIndex)] = Decode(_Buffer[index]);
    #endif
}
// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel SetXYPlane
#pragma kernel SetZPlane
#pragma kernel CBDR
#pragma kernel TBDRSphere
#pragma kernel Clear 
#pragma kernel TBDRSpot
#include "UnityCG.cginc"
#include "CGINC/VoxelLight.cginc"
float4x4 _InvVP;

RWTexture3D<float4> _XYPlaneTexture;
RWTexture2D<float4> _ZPlaneTexture;
RWTexture3D<int> _TilePointLightList;
RWTexture3D<int> _TileSpotLightList;
StructuredBuffer<PointLight> _AllPointLight;
StructuredBuffer<SpotLight> _AllSpotLight;
StructuredBuffer<FogVolume> _AllFogVolume;
RWStructuredBuffer<uint> _PointLightIndexBuffer;
RWStructuredBuffer<uint> _SpotLightIndexBuffer;


[numthreads(XRES, YRES, 1)]
void SetXYPlane(uint2 id : SV_DispatchThreadID)
{
	float2 leftBotUV = id / float2(XRES, YRES);
	float2 rightTopUV = leftBotUV + (1.0 / float2(XRES, YRES));
	leftBotUV = leftBotUV * 2 - 1;
	rightTopUV = rightTopUV * 2 - 1;
#if UNITY_REVERSED_Z
	const float nearZ = 1;
	_XYPlaneTexture[uint3(id, 0)] = GetPlane(mul(_InvVP, float4(1, rightTopUV.y, nearZ, 1)), mul(_InvVP, float4(-1, rightTopUV.y, nearZ, 1)), mul(_InvVP, float4(0, rightTopUV.y, 0.5, 1)));                  //TOP
	_XYPlaneTexture[uint3(id, 1)] = GetPlane(mul(_InvVP, float4(-1, leftBotUV.y, nearZ, 1)), mul(_InvVP, float4(1, leftBotUV.y, nearZ, 1)), mul(_InvVP, float4(0, leftBotUV.y, 0.5, 1)));                  //DOWN
	_XYPlaneTexture[uint3(id, 2)] = GetPlane(mul(_InvVP, float4(leftBotUV.x, 1, nearZ, 1)), mul(_InvVP, float4(leftBotUV.x, -1, nearZ, 1)), mul(_InvVP, float4(leftBotUV.x, 0, 0.5, 1)));        //LEFT
	_XYPlaneTexture[uint3(id, 3)] = GetPlane(mul(_InvVP, float4(rightTopUV.x, -1, nearZ, 1)), mul(_InvVP, float4(rightTopUV.x, 1, nearZ, 1)), mul(_InvVP, float4(rightTopUV.x, 0, 0.5, 1)));            //RIGHT
#else
	const float nearZ = 1;
	_XYPlaneTexture[uint3(id, 0)] = GetPlane(mul(_InvVP, float4(-1, rightTopUV.y, nearZ, 1)), mul(_InvVP, float4(1, rightTopUV.y, nearZ, 1)), mul(_InvVP, float4(0, rightTopUV.y, 0.5, 1)));                  //TOP
	_XYPlaneTexture[uint3(id, 1)] = GetPlane(mul(_InvVP, float4(1, leftBotUV.y, nearZ, 1)), mul(_InvVP, float4(-1, leftBotUV.y, nearZ, 1)), mul(_InvVP, float4(0, leftBotUV.y, 0.5, 1)));                  //DOWN
	_XYPlaneTexture[uint3(id, 2)] = GetPlane(mul(_InvVP, float4(leftBotUV.x, -1, nearZ, 1)), mul(_InvVP, float4(leftBotUV.x, 1, nearZ, 1)), mul(_InvVP, float4(leftBotUV.x, 0, 0.5, 1)));        //LEFT
	_XYPlaneTexture[uint3(id, 3)] = GetPlane(mul(_InvVP, float4(rightTopUV.x, 1, nearZ, 1)), mul(_InvVP, float4(rightTopUV.x, -1, nearZ, 1)), mul(_InvVP, float4(rightTopUV.x, 0, 0.5, 1)));            //RIGHT

#endif
}

[numthreads(ZRES, 1, 1)]
void SetZPlane(uint id : SV_DISPATCHTHREADID)
{
	float3 backPos = lerp(_CameraNearPos, _CameraFarPos, id / (float)ZRES);
	float3 forwardPos = lerp(_CameraNearPos, _CameraFarPos, (id + 1.0) / (float)ZRES);
	_ZPlaneTexture[uint2(id, 0)] = GetPlane(-_CameraForward, backPos);
	_ZPlaneTexture[uint2(id, 1)] = GetPlane(_CameraForward, forwardPos);
}

[numthreads(XRES, YRES, 1)]
void CBDR(uint3 id : SV_DISPATCHTHREADID)
{
	float4 planes[2];
	uint i;
	planes[0] = _ZPlaneTexture[uint2(id.z, 0)];
	planes[1] = _ZPlaneTexture[uint2(id.z, 1)];

	//TODO
	//
	uint clusterCount = 0;
	uint sBufferIndex = GetIndex(id, VOXELSIZE, (MAXLIGHTPERCLUSTER + 1)) + 1;
	uint len = min(_TilePointLightList[uint3(id.xy, 0)], MAXPOINTLIGHTPERTILE + 1);
	for (i = 1; i < len && clusterCount < MAXLIGHTPERCLUSTER; ++i) {
		int lightIndex = _TilePointLightList[uint3(id.xy, i)];
		PointLight lit = _AllPointLight[lightIndex];
		if (SphereIntersect(lit.sphere, planes) > 0.5) {
			_PointLightIndexBuffer[sBufferIndex + clusterCount] = lightIndex;
			clusterCount++;
		}
	}
	_PointLightIndexBuffer[sBufferIndex - 1] = clusterCount + sBufferIndex;

	clusterCount = 0;
	len = min(_TileSpotLightList[uint3(id.xy, 0)], MAXSPOTLIGHTPERTILE + 1);
	for (i = 1; i < len && clusterCount < MAXLIGHTPERCLUSTER; ++i) {
		int lightIndex = _TileSpotLightList[uint3(id.xy, i)];
		Cone lit = _AllSpotLight[lightIndex].lightCone;
		if (ConeIntersect(lit, planes) > 0.5) {
			_SpotLightIndexBuffer[sBufferIndex + clusterCount] = lightIndex;
			clusterCount++;
		}
	}
	_SpotLightIndexBuffer[sBufferIndex - 1] = clusterCount + sBufferIndex;
}

[numthreads(XRES, YRES, 1)]
void TBDRSphere(uint3 id : SV_DISPATCHTHREADID)
{
	uint i;
	PointLight lit = _AllPointLight[id.z];
	if (SphereIntersect(lit.sphere, _XYPlaneTexture, id.xy, 4) > 0.5) {
		int currentValue;
		InterlockedAdd(_TilePointLightList[uint3(id.xy, 0)], 1, currentValue);
		if (currentValue <= MAXPOINTLIGHTPERTILE)
		{
			_TilePointLightList[uint3(id.xy, currentValue)] = id.z;
		}
	}
}

[numthreads(XRES, YRES, 1)]
void Clear(uint3 id : SV_DISPATCHTHREADID)
{
	_TilePointLightList[uint3(id.xy, 0)] = 1;
	_TileSpotLightList[uint3(id.xy, 0)] = 1;
}

[numthreads(XRES, YRES, 1)]
void TBDRSpot(uint3 id : SV_DISPATCHTHREADID)
{
	uint i;
	SpotLight lit = _AllSpotLight[id.z];
	if (ConeIntersect(lit.lightCone, _XYPlaneTexture, id.xy, 4) > 0.5) {
		int currentValue;
		InterlockedAdd(_TileSpotLightList[uint3(id.xy, 0)], 1, currentValue);
		if (currentValue <= MAXSPOTLIGHTPERTILE)
		{
			_TileSpotLightList[uint3(id.xy, currentValue)] = id.z;
		}
	}
}